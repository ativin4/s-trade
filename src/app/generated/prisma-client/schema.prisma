// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Define database connection via the `DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define custom output path for generated Prisma Client
generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma-client"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  settings       UserSettings?
  aiAnalyses     AIAnalysis[]
  brokerAccounts BrokerAccount[]
  trades         Trade[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  maxBudgetPerTrade  Float?
  riskTolerance      String?
  autoTradingEnabled Boolean? @default(false)
  excludedSectors    String[]
  preferredMarketCap String?
  otpMethod          String?
}

model AIAnalysis {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  symbol         String
  recommendation String
  confidence     Float
  reasoning      String   @db.Text
  targetPrice    Float?
  stopLoss       Float?
  timeframe      String?
  riskLevel      String?
  keyFactors     Json?
  requestData    Json
  responseData   Json
  createdAt      DateTime @default(now())
}

model BrokerAccount {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  brokerName String
  isActive   Boolean @default(true)
  trades     Trade[]
}

model Trade {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  brokerAccountId String
  brokerAccount   BrokerAccount @relation(fields: [brokerAccountId], references: [id])
  symbol          String
  tradeType       String
  orderType       String
  status          String
  aiConfidence    Float?
  aiReason        String?
  quantity        Int
  price           Float
  createdAt       DateTime      @default(now())
}
